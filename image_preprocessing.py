# -*- coding: utf-8 -*-
"""cropping_IMG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QWaAnQ8xkDUF445rlqzi9R7DtfN-9wY5
"""

from google.colab import drive
drive.mount('/content/drive')

import os
notebook_path = os.path.abspath(".")
os.chdir('/content/drive/MyDrive/DLIP_FINAL/DeepLearningModel')
print("현재 노트북 디렉토리 경로:", notebook_path)

import cv2
import numpy as np
import matplotlib.pyplot as plt

# 경로 설정
input_dir = '/content/drive/MyDrive/DLIP_FINAL/DeepLearningModel/final_dataset/final_data_good'
output_dir = '/content/drive/MyDrive/DLIP_FINAL/DeepLearningModel/final_dataset/train/good'

# 출력 폴더 없으면 생성
os.makedirs(output_dir, exist_ok=True)

# 지원하는 이미지 확장자
valid_exts = ['.jpg', '.jpeg', '.png', '.bmp']

# 폴더 내 모든 파일 반복
for filename in os.listdir(input_dir):
    if any(filename.lower().endswith(ext) for ext in valid_exts):
        input_path = os.path.join(input_dir, filename)
        output_path = os.path.join(output_dir, filename)

        # 1. 이미지 읽기
        image = cv2.imread(input_path)
        if image is None:
            print(f"이미지 로딩 실패: {filename}")
            continue

        # 2. 전처리 예시: grayscale → blur → Canny → dilation
        gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        kernel_sharpen = np.array([[-1, -1, -1],
                             [-1, 9, -1],
                             [-1, -1, -1]])
        sharp_image = cv2.filter2D(gray_image, -1, kernel_sharpen)
        _, thresh = cv2.threshold(gray_image, 30, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        largest_contour = max(contours, key=cv2.contourArea)
        contour_image = image.copy()
        cv2.drawContours(contour_image, [largest_contour], -1, (255, 0, 0), 3)

        # 외접원 구하기
        (x, y), radius = cv2.minEnclosingCircle(largest_contour)
        center_x, center_y = int(x), int(y)

        # (350, 350) 크롭 영역 계산
        crop_size = 400
        half_crop = crop_size // 2
        h, w = image.shape[:2]
        # 이미지 경계 넘어가지 않도록 예외 처리
        x1 = max(center_x - half_crop, 0)
        y1 = max(center_y - half_crop, 0)
        x2 = min(center_x + half_crop, w)
        y2 = min(center_y + half_crop, h)

        cropped_image = image[y1:y2, x1:x2]
        result_img = cv2.cvtColor(cropped_image, cv2.COLOR_RGB2GRAY)


        # 3. 저장 (Grayscale이나 1채널이면 확장자에 따라 문제 생길 수 있어 PNG 권장)
        cv2.imwrite(output_path, result_img)
        print(f"저장 완료: {output_path}")